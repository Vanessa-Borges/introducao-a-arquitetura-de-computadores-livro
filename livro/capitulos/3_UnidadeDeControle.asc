== Unidade de Controle

.Objetivos do capítulo
____________________
Ao final deste capítulo você deverá ser capaz de:

* Conhecer o funcionamento da Unidade de Controle em mais detalhes
* Apresentar como as instruções são executadas pela CPU

____________________

Neste capítulo vamos entrar mais a fundo no estudo das CPUs e vamos apresentar a Unidade de Controle, principal unidade dos processadores. Conhecer a Unidade de Controle é essencial para o entendimento de como as instruções são executadas pelo computador. 


=== Introdução

A Unidade de Controle, como visto no capítulo anterior, é a unidade interna à CPU responsável (como o próprio nome já diz) pelo controle da execução das instruções.
Como a CPU é uma máquina de executar instruções, a Unidade de Controle é quem controla o principal funcionamento do computador.

O projeto de uma Unidade de Controle varia de arquitetura para arquitetura, mas há alguns pontos que são comuns a todas elas. Toda Unidade de Controle trabalha com a execução de Microoperações.
Como pode ser visto na <<fig_execucao>>, um programa é sempre executado instrução por instrução. Essas seriam instruções de máquina, compiladas a partir de Assembly, ou antes a partir de uma linguagem de alto nível e depois compiladas para Assembly.
Cada instrução é executada através de um Ciclo de Instrução, como visto no capítulo anterior.
Nessa ilustração o ciclo de instrução foi apresentado em cinco estágios (Carrega instrução, decodifica, executa, salva resultados e checa interrupção). 
Mas ele pode variar de acordo com a arquitetura da Unidade de Controle e também de acordo com o tipo de instrução.
Uma instrução com vários parâmetros que estão na memória, por exemplo, pode necessitar de um estágio a mais antes da execução para buscar os dados na memória.
Já outra que utiliza apenas dados de registradores pode omitir esse passo e executá-lo no próprio estágio de execução.

[[fig_execucao]]
.Execução em Microoperações
image::images/cap3/fig_execucao.jpg[scaledwidth=“30%"] 


=== Microoperações

Ainda na <<fig_execucao>> pode ser visto que cada estágio do Ciclo de Instrução é quebrado em sub-estágios, chamados de Microoperações.
A Microoperação é a operação atômica (indivisível) realizada pela Unidade de Controle para a execução de cada estágio.
Cada vez que um estágio do Ciclo de Instrução for executado, as devidas Microoperações são executadas pela Unidade de Controle.

Essa organização é necessária para melhorar a organização da CPU e facilitar o projeto das Unidades de Controle.
Além disso, nos projetos de Unidades de Controle modernas, é possível reutilizar Microoperações de um estágio em outro.
Por exemplo, para executar uma instrução, é necessário executar uma Microoperação para buscar um dado que está em um registrador (ou memória) para a ULA.
Se houver vários dados envolvidos, a única tarefa a ser realizada é pedir para a Unidade de Controle executar a mesma Microoperação de buscar dado, mas agora com endereço diferente.

Dessa maneira, todas instruções que chegam à Unidade de Controle são quebradas em estágios (lembre-se do Pipeline), que por sua vez, separados em sequências de Microoperações e, só então, são executadas.
Agora vamos apresentar alguns exemplos de como os principais estágios de execução são organizados em Microoperações.


==== Busca de Instrução

Neste estágio uma nova instrução deve ser buscada da memória e trazida para a CPU para que possa ser decodificada e executada em seguida.
O endereço da instrução a ser buscada está sempre no Contador de Programa (PC) e a instrução buscada da memória é armazenada no Registrador de Instrução (IR).
Vamos então apresentar como seriam as Microoperações para realizar a Busca de Instrução.

A seguir cada Microoperação é apresentada ao lado de uma determinação do tempo em que ela será realizada.
Nesse caso, três unidades de tempo são necessárias (t1, t2 e t3).
Imagine que cada unidade de tempo é 1 ciclo de clock (as microoperações mais complexas levam mais tempo do que isso).

----

t1:     MAR <- (PC)
        Memória <- fetch;
t2:     MBR <- (memória)
        PC <- (PC) + 1
t3:     IR <- (MBR)

----

No tempo t1 o endereço guardado no registrador PC é copiado para o registrador MAR, que é o registrador conectado ao Barramento de Endereço.
Ao mesmo tempo, a CPU envia para a memória um sinal de “fetch”, indicando que precisa ser trazida uma nova instrução.
No tempo t2 a memória lê o endereço contigo no Barramento de Endereço (que é sempre o mesmo de MAR), busca a instrução e a escreve no Barramento de Dados.
Como o MBR sempre reflete aquilo que está no Barramento de Dados, o MBR agora contém a instrução trazida da memória. 
Esta tarefa é realizada essencialmente pela memória, a ULA está livre para executar outra Microoperação, e aproveita para adicionar 1 ao endereço do PC.
Esta operação de incremento vai garantir que a próxima instrução a ser buscada será a do endereço seguinte da memória.
Finalmente, no tempo t3, a instrução que foi trazida da memória e salva em MBR pode ser agora salva em IR.

A instrução precisa sempre estar em IR porque na faze de decodificarão, a Unidade de Controle vai buscar lá que instrução deve executar.

Observe que a mesma Microoperação poderia ser executada de forma diferente, como mostrada a seguir.

----

t1:     MAR <- (PC)
        Memória <- fetch;
t2:     MBR <- (memória)
t3:     PC <- (PC) +1 
        IR <- (MBR)

----

Nesta segunda opção, o incremento de PC foi passado para o tempo t3, ao invés de t2, o que gera o mesmo resultado.

A quantidade de Microoperações que podem ser executadas no mesmo ciclo de clock depende da arquitetura do processador. 
Por exemplo, se há apenas uma ULA, então só é possível executar uma única operação lógica, ou aritmética a cada ciclo de clock.
O mesmo serve para o uso acesso à memória com MAR e MBR. Se houver um barramento exclusivo para instruções, separado do barramento de dados e uma memória de instrução separada da memória de dados (quase todos processadores hoje possuem), e então é possível buscar uma instrução no mesmo ciclo de clock que se busca um dado.

==== Busca indireta

Outro tipo de Microoperação muito utilizado é a Busca Indireta. 
Ela trata de buscar um dado que está na memória e trazer para a CPU para ser utilizado pela instrução.
O termo “indireta” indica que o dado não está diretamente na CPU (em um registrador) mas na memória.

Imagine que a instrução em questão seja a soma de 2 números A e B, ambos na memória.
Esta instrução foi buscada no estágio anterior, portanto no ciclo seguinte ela estará no registrador IR.
Então, os endereços de A e B estão presentes na instrução que agora está em IR.
A Busca Indireta deve então ser realizada para A e depois para B, da seguinte forma:

----

t1:     MAR <- (IRendereco)  
        Memória <- read
t2:     MBR <- (memória)
t3:     ACC <- (MBR)

----

No primeiro instante t1 o endereço do dado contido em IR é passado para o registrador de endereço MAR.
Ao mesmo tempo a CPU envia para a memória um sinal de leitura (read), avisando que deve ser feita uma busca indireta.
No instante seguinte, t2, o conteúdo do dado é trazido da memória para o MBR através do Barramento de Dados, e no último passo, em t3, o conteúdo agora em MBR é levado para um registrador para que seja utilizado na operação, geralmente o Acumulador (ACC).


==== Execução

Após a busca da instrução e dos dados necessários, é hora de executar a instrução na Microoperação de execução.
Mantendo o exemplo da soma A e B apresentado anteriormente, a Unidade de Controle terá que fazer a Busca Indireta de A e B para depois realizar a soma.
Supondo que A seja salvo em ACC, ele deve ser transferido para outro registrador, digamos R1 antes de Busca Indireta por B.
Assim, a execução seria:

----

t1:     R1 <- ACC 	
// Busca indireta por B:
t2:     MAR <- (IRendereco)
        Memória <- read
t3:     MBR <- (memória)
t4:     ACC <- MBR
t5:     ACC = R1 + ACC

----

Em t1 o conteúdo de A salvo em ACC será transferido para o registrador R1.
Nos intervalos de t2 até t4 seria feita a Busca Indireta por B.
E, finalmente, no instante t5 a soma de R1 e ACC seria realizada e salva no acumulador ACC.

==== Salvar resultado

Após esse último passo, o conteúdo de ACC com o resultado da operação deve ser transferido para o local de destino. 
Isso é feito no estágio de Salvar Resultado. 
Se o resultado for salvo num registrador, a operação é direta e feita num único ciclo de clock.
Mas se precisar salvar o resultado na memória, uma escrita indireta deverá ser realizada para salvar o conteúdo de ACC na memória.

----

t1: 	MAR <- (IRendereco)  
t2: 	MBR <- ACC
	Memória <- write
----


Para tal, inicialmente em t1 o endereço da variável de memória que precisa ser salva é passado para o MAR.
O conteúdo de ACC é passado para o MBR no ciclo seguinte (t2), ao mesmo tempo em que a CPU envia para a memória um sinal de escrita.
Ao receber esse sinal, a memória traz o conteúdo de MBR e o salva no endereço representado por MAR.

==== Salto condicional

Uma instrução muito comum executada pelos computadores são os saltos condicionais. 
Ela indica que se uma determinada condição for satisfeita, a execução não deve ser a da instrução seguinte, mas a indicada pela instrução.
Imagine uma instrução “Salta se zero”, com dois parâmetros, X e Y. 
O X seria a variável a ser testada e o Y o endereço para onde a execução deve saltar caso o valor de X seja 0.

Desta forma, as microoperações seriam as seguinte:

----

// Busca indireta por X:
t1:	MAR <- (IRenderecoX)
	Memória <- read
t2: 	MBR <- (Memória)
t3:     ACC <- (MBR)

t4:     se ACC == 0, PC = (IRenderecoY)

----

Inicialmente, de t1 a t3, seria buscado o conteúdo de X na memória.
No último ciclo t4, o conteúdo de ACC seria comparado com 0 e se forem iguais, o conteúdo de PC será o endereço da variável Y, também presente em IR. 
Observe que, caso contrário, nada precisa ser feito, o PC continuará como antes e a próxima instrução depois da atual será executada.

=== Tipos de Microoperações

Como já foi possível observar através dos exemplos apresentados, há quatro tipos básicos de Microoperações de uma Unidade de Controle. São eles:

- Transferência de dados entre registradores
- Transferência de dados de registrador para o exterior da CPU
- Transferência de dados do exterior da CPU para um registrador
- Operação lógica e aritmética

A transferência de dados de um registrador para outro é a mais simples das Microoperações e geralmente é feita num único ciclo de clock.
Já a movimentação de dados de ou para o exterior da CPU pode ser mais complexa. 
Para facilitar muitos computadores mapeiam todos dispositivos de Entrada e Saída com se fossem memória. 
Ou seja, para a CPU, enviar um dado para um dispositivo seria como escrever um dado na memória, bastando usar um endereço diferente.
Isso facilita bastante a operação da Unidade de Controle, mas pode limitar a quantidade de endereços de memória disponíveis para os programas.
As operações de transferência de dados são complexas também porque levam um tempo não conhecido para serem executadas.
Se o dado estiver na memória Cache o acesso é mais rápido, se estiver na Memória Principal levará mais tempo, e se tiver num dispositivo externo, um Disco Rígido, por exemplo, pode levar ainda mais.

As operações lógica e aritméticas podem ser mais rápidas ou mais lentas dependendo de cada uma delas. 
Operações com números de Ponto Flutuante tendem a levar mais tempo do que aquelas com números inteiros.
Já as operações trigonométricas são as mais lentas que o computador pode operar.

=== Decodificação

A execução das Microoperações é sempre ordenada pela Unidade de Controle. 
Isso é feito no estágio de Decodificação, a partir da leitura da instrução presente em IR.
O primeiro da decodificarão é ler o código da instrução para conhecer seu tipo.
Dependendo do tipo, a instrução é quebrada numa quantidade específica de Estágios e cada estágio no seu respectivo grupo de Microoperações.
Cada vez uma que Microoperação se encerra, a Unidade de Controle checa qual será a próxima e envia os sinais para os devidos registradores, para ULA e dispositivos envolvidos, como memória ou dispositivos de Entrada e Saída.

Dessa forma, podemos dizer que a Unidade de Controle possui duas funções principais, a execução e o sequenciamento das instruções.
Nessa última função a Unidade de Controle deve saber o exato momento que uma Microoperação concluiu para executar a próxima, e quando a última Microoperação for executada, iniciar um novo Estágio, e quando o último Estágio for concluído, executar a próxima instrução do programa.

=== Exemplo

Como exemplo, vamos visualizar como seria a execução de um pequeno programa na forma de microoperações.
Para tal, considere um processador que executa suas instruções em cinco estágios de execução: 

- Busca de Instrução
- Decodifica Instrução
- Busca de Dados
- Executa Instrução
- Salva Resultados

Cada instrução do programa é decomposta em microoperações que são executadas, geralmente, uma a cada ciclo de clock.

Sendo, assim, suponha que o programa a ser executado está na memória de acordo com a <<tabela_exemplo>> a seguir. 
Cada instrução fica armazenada em um endereço de memória, assim como as variáveis envolvidas.

[[tabela_exemplo]]
.Exemplo de um programa de duas instruções armazenado na memória
[width="90%", frame="none", grid="all", cols="^1,^2”, options="header"]
|=================================
| Endereço | Instrução ou Dado
| FF01     | A = B * C
| FF02     | B = A + 2
| FF03     | 15  // valor de A
| FF04     | 2  // valor de B
| FF05     | 4  // valor de C
|=================================

A seguir serão apresentadas as microoperações executadas para a primeira instrução.

==== Busca de Instrução

Para que esse programa seja executado, é necessário que o registrador PC contenha o endereço FF01 para que a primeira instrução do nosso programa nessa buscada e executa. 
O início de execução de um programa é causado por uma ação do usuário (quando ele clica no ícone de um programa, por exemplo), pelo Sistema Operacional ou um por um outro programa.

Uma vez que o PC tenha o endereço FF01, na próxima instrução a ser buscada, a Unidade de Controle irá executar as seguintes instruções:

----

t1:     MAR <- PC
        Memória <- fetch;
t2:     MBR <- ‘A = B * C’
        PC <- PC + 1
t3:     IR <- MBR

----

Neste exemplo, no tempo t1, MAR recebeu o endereço contido em PC, ou seja, FF01.
Nesse mesmo instante, a Unidade de Controle envia o sinal ‘fetch’ para memória, que por sua vez, passa o conteúdo do endereço FF01 para o registrador MBR no instante t2 seguinte.
Aproveitando o tempo, enquanto o conteúdo da memória era trazido para o MBR, a Unidade de Controle incrementou o endereço de PC para FF02.
Só no tempo t3 a instrução está pronta em MBR e é então copiada para IR para que possa ser Decodificada na próxima microoperação.

==== Decodificação

Durante a decodificação não são executadas Microoperações.
A instrução que acabou de ser copiada para IR é analisada e a Unidade de Controle vai então escolher que Microoperações serão executadas nas etapas seguintes.

==== Busca de Dados

Nas próximas etapas, será necessário buscar os dados necessários para a execução da instrução.
Como os dados envolvidos (B e C) estão na memória, e não em registradores, serão necessárias duas Buscas Indiretas.
A instrução na verdade nunca chega como sendo ‘A = B * C’. 
Ao invés disso, ela seria armazenada como ‘(FF03) = (FF04) * (FF05).
Por questões didáticas, utilizamos ainda as variáveis A, B e C.

Para buscar o conteúdo da variável B, as seguintes Microoperações são executadas.

Na etapa de Decodificação, a instr

----

t4:     MAR <- (FF04)  
        Memória <- read
t5:     MBR <- 2
t6:     ACC <- MBR

----

Aqui, o endereço FF04 é passado para o MAR para que seja buscado na memória no tempo t4, em seguida é enviado um sinal de leitura para a memória.
Ao receber o sinal de leitura, a memória busca o conteúdo do endereço FF04 e o copia para dentro da CPU, no registrador MBR no instante t5.
Finalmente, no tempo t6, o conteúdo de MBR (valor 2) é copiado para o registrador acumulador (ACC).

.NOTE

Note que usamos sempre parêntesis para indicar que se trata de um endereço, e sem os parêntesis quando se trata de um dado.

O próximo passo seria buscar o conteúdo da variável C de forma análoga a utilizada para buscar B.

----

t7:     MAR <- (FF05)  
        Memória <- read
t8:     MBR <- 4
t9:     R1 <- MBR

----

Perceba que na última Microoperação o conteúdo de C foi copiado para R1, para não sobreescrever e perder o conteúdo da variável B que foi armazenado em ACC.

==== Execução

No próximo passo, a instrução precisa ser executada.
Isso é feito em um único passo no tempo t10, onde ACC, que agora mantém o conteúdo da variável B é multiplicado por R1, que possui o conteúdo da variável C.

----

t10:     ACC <- ACC * R1  

----

==== Salva Resultados


Finalmente, o resultado da operação precisa ser salvo na variável A.
Para tal, o endereço de A (FF03) é copiado para o registrador de endereço (MAR) no instante t11.
No instante t12 seguinte, o resultado da operação aritmética armazenado em ACC é copiado para o registrador de dados (MBR).
Neste mesmo instante, a Unidade de Controle envia o sinal de escrita para a memória, que localiza o endereço FF03 e escreve nele o resultado da operação aritmética que foi salvo em ACC, ou seja, oito (8).

----

t11: 	MAR <- (FF03)  
t12: 	MBR <- ACC
	Memória <- write
----

==== Instrução completa

Podemos agora visualizar a seguir como a primeira instrução do programa (A = B * C) foi executada em microoperações.

----
// Busca de Instrução
t1:     MAR <- PC
        Memória <- fetch;
t2:     MBR <- ‘A = B * C’
        PC <- PC + 1
t3:     IR <- MBR

//Busca de Dados (B)
t4:     MAR <- (FF04)  
        Memória <- read
t5:     MBR <- 2
t6:     ACC <- MBR

//Busca de Dados (C)
t7:     MAR <- (FF05)  
        Memória <- read
t8:     MBR <- 4
t9:     R1 <- MBR

//Execução
t10:    ACC <- ACC * R1  

//Salva resultados
t11: 	MAR <- (FF03)  
t12: 	MBR <- ACC
	Memória <- write

----

A primeira instrução foi finalizada em 12 passos. 
Se cada passo for 1 ciclo de clock, então temos 12 ciclos do relógio para concluir essa instrução.
A segunda instrução do programa (B = A + 2) é muito semelhante, e também precisará de 12 passos para ser executada. 
Esse é um ótimo exercício para você praticar. 
Ao final a memória estará diferente de como iniciou, e deverá estar com os conteúdos apresentados na <<tabela_exemplo2>>.

[[tabela_exemplo2]]
.Memória após execução do programa.
[width="90%", frame="none", grid="all", cols="^1,^2”, options="header"]
|=================================
| Endereço | Instrução ou Dado
| FF01     | A = B * C
| FF02     | B = A + 2
| FF03     | 8  // valor de A
| FF04     | 10  // valor de B
| FF05     | 4  // valor de C
|=================================



=== Recapitulando

Neste capítulo vimos que a Unidade de Controle é responsável por controlar como e quando as instruções dos programas são executadas.
Elas fazem isso quebrando as intrusões em estágios e os estágios em Microoperações.
Desta forma, as Microoperações tornam-se as menores unidades de execução do computador.
Como são muito simples, as Microoperações são mais fáceis de serem implementadas pelo hardware e o projeto de uma CPU pode ser reutilizado em diversas ocasiões.



// Sempre terminar o arquivo com uma nova linha.




