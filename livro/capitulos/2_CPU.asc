== Unidade Central de Processamento (CPU)

.Objetivos do capítulo
____________________
Ao final deste capítulo você deverá ser capaz de:

* objetivo 1
* objetivo 2
* objetivo N
____________________

Nesse capítulo vamos estudar a parte mais importante de um computador, que é a Unidade Central de Processamento, ou UCP, ou, do inglês, CPU. 
A CPU é responsável não apenas por executar os programas contidos na memória, mas também de controlar todos os dispositivos de entrada e saída. 
Seu avanço ao longo dos anos tem permitido que programas fossem executados cada vez mais rapidamente. 
Hoje temos processadores de vários núcleos capazes de executar várias atividades ao mesmo tempo. 
São esses processadores e funcionalidades que iremos estudar nesse capítulo.

=== O que é um programa?

Nesse momento, você não apenas deve saber o que é um programa, como já deve ter até já escrito seus próprios programas e entendido um pouco como o computador funciona.
Os programas são sequências finitas de passos que foram definidas por um programador para alcançar um objetivo específico.
Cada passo desse programa é chamado de instrução. 
Não necessariamente, uma instrução escrito em uma linguagem de alto nível, como C, Java, Python, por exemplo, é diretamente transformada em uma instrução de máquina e armazenada em memória para execução da CPU.
Na verdade, geralmente, uma instrução de uma linguagem de alto nível embute vários comandos e ações a serem executadas pela CPU.
Essa é a principal razão da criação dessas linguagens de alto nível. 
O programador deve ter o menor trabalho possível ao escrever um programa. 
Ele deve se preocupar com o problema que está tentando solucionar, e em memorizar dezenas de comandos de uma linguagem de máquina extensa e repleta de detalhes.

Após compilado, o programada de linguagem de alto nível é transformado em um programa apenas com instruções de máquina. 
Cada instrução de máquina contém apenas uma única operação a ser realizada pela CPU. 
Para ser executado, esse programa deve ser transferido para a Memória Principal. 
No princípio, um Operador de Máquina, copiada todas instruções para a memória de maneira quase que manual. 
Hoje em dia essa operação é realizada pelo Sistema Operacional (Windows, Linux etc.). 
Assim que um usuário clica com o mouse, ou pressiona a tecla Enter do teclado solicitando que um determinado programa execute, o Sistema Operacional copia o programa para a memória e solicita que a CPU o execute.

Não podemos esquecer que a memória do computador apenas armazena números binários. 
Então, podemos dizer que um programa em linguagem de máquina é formado por instruções em binário.
A cada instrução trazida da memória, a CPU lê seu código binário de operação para saber do que se trata, e inicia o processo de execução.
Dependendo da operação, que pode ser de movimentação de dados, uma operação lógica, ou aritmética, ou uma operação de armazenamento de dados, a CPU envia ordens para que os outros dispositivos do computador atuem de forma a completar a operação.
Essas ordens são enviadas através de pulsos elétricos passados por fios dentro do computador. Esses fios são chamados de *Barramento de Controle*.

==== Software X Hardware

O computador é composto por dois elementos, o software e o hardware.
Tanto o hardware quando o software foram escritos por um programador, ou engenheiro, para se resolver um determinado problema.
O início é sempre o mesmo. O profissional se depara com um problema e projeta uma solução algorítmica para ele.
A diferença está na concepção. O hardware é concebido em chip, utilizando transistores interconectados.
Uma vez elaborado, o hardware não pode mais ser modificado. Ele é uma solução rígida (do inglês, Hard) para o problema.
Já o software é elaborado para ser armazenado numa memória e ser executado com um processador de propósito geral.
Ele é uma solução flexível (do inglês, Soft) para o problema, já que o programador pode, a cada momento, modificar seu programa afim de torná-lo cada vez melhor.

Soluções em software são sempre mais lentas do que soluções equivalentes em hardware. 
Isso porque para executar um programa, cada instrução deve antes ser armazenada em memória, transferidas para a CPU (lembre-se que memórias são muito mais lentas do que CPUs) e, só então, ser executada pela CPU.
Já as soluções em hardware não utilizam instruções, elas executam as operações diretamente.

Por outro lado, as soluções em software ganham em flexibilidade, já que os programas podem ser facilmente modificados. 
Já as soluções em hardware, não.
Uma vez concebido, um hardware não pode mais ser modificado, ele deve ser descartado para dar lugar a uma versão mais nova.
Isso torna projetos em hardware muito mais caros.

Para entender melhor, podemos citar alguns exemplos de implementações em hardware comumente utilizadas. 
Todas são escolhidas devido ao seu caráter de pouca necessidade de modificação, mas muito demanda por alto desempenho.
Por exemplo, chips de criptografia para celulares (geralmente smartphones), processadores aritméticos para acelerar o cálculos, aceleradores gráficos para gerar gráficos mais rápidos, alguns chips para fazer edições rápidas em fotos, geralmente acoplados às câmeras digitais. As implementações são feitas em software quando a demanda por desempenho não é tanta, ao mesmo tempo em que as atualizações são frequentes, como os Sistemas Operacionais, os jogos e aplicativos em geral.

Apesar de não ser tão rápida quanto gostaríamos, a CPU é uma solução muito boa por permitir a execução de, praticamente, qualquer tipo de programa, se tornando uma máquina de propósito geral.

=== Estrutura de uma CPU

Toda CPU é formada por, pelo menos quatro elementos, como podem ser vistos na <<fig_arq_detalhada>>:

* Memória cache
* Registradores
* Unidade Lógica e Aritmética (ULA)
* Unidade de Controle (UC)

[[fig_arq_detalhada]]
.Estrutura de uma CPU
image::images/fig_arq_detalhada.jpg[scaledwidth=“30%"]

A Memória Cache foi omitida para facilitar a visualização já que ela será apresentada e detalhada em capítulo posterior.

==== Os registradores

Os registradores são memórias elaboradas com o mínimo de transistores possível, utilizando o que há de mais moderno em tecnologia de armazenamento. 
Elas são as memórias mais rápidas que podem ser construídas e por isso são também as mais caras. 
Por essa razão, elas aparecem numa quantidade muito pequena em um computador, na casa de alguns Kilo Bytes.
Eles podem ser divididos em dois grupos.
Os registradores de propósito geral, e os de propósito específico.
Como o próprio nome diz, os primeiros podem ser utilizados pelos programas para quaisquer objetivos, já os segundos são específicos para algumas tarefas. 
Por exemplo, há um registrador na CPU para controlar se o processador deve continuar em execução, ou entrar em modo de espera por nova ordem. 
Se esse registrador receber um valor diferente de zero, o processador entrará em modo de espera, até que receba a ordem de modificar esse valor.
Na <<fig_arq_detalhada>> os registradores de propósito específico apresentados são:

* Program Counter (PC)
* Instruction Register (IR)
* Memory Address Register (MAR)
* Memory Buffer Register (MBR)

O PC contém o endereço de memória que será utilizado para buscar a próxima instrução a ser executada pela CPU.
Antes de executar qualquer instrução, a CPU envia o conteúdo de PC para a memória através do Barramento de Endereço, a memória envia o conteúdo da memória nesse endereço através do Barramento de Dados.
Esse conteúdo é então armazenado no IR.
Já o IR, que recebeu a instrução que veio da memória, tem o objetivo de guardar a instrução e passá-la para a Unidade de Controle, que é quem vai lê-la e tomar as decisões necessárias para executá-la.
Com relação ao MAR e ao MBR, eles possuem funções análogas ao PC e IR, respectivamente, mas referentes a dados e não a instruções.
Quando uma operação precisa ser realizada com algum dado que está na memória (e não em um registrador), o endereço desse dado é passado para o MAR.
A CPU então passa o conteúdo de MAR para a memória através do Barramento de Endereço, que retornará o conteúdo da memória nesse endereço através do Barramento de Dados.
O conteúdo trazido pela memória será armazenado em MBR. 
Só então o dado poderá ser utilizado para o processamento inicialmente planejado.

Os registradores de dados são utilizados para guardar as variáveis dos programas. Como eles estão presentes em quantidades muito pequenas, são poucas as variáveis que ficam armazenadas em registradores. As demais ficam na Memória Principal.
Quando uma operação precisa ser realizada e seus dados estão nos Registradores de Propósito Geral, a CPU não precisa buscá-los na memória e o processamento torna-se muito mais lento. 

.NOTE
Lembre-se que as memórias são muito mais lentas do que os processadores!

A CPU tenta ao máximo manter as variáveis mais utilizadas nos registradores. Ela faz isso guardando aquelas mais usadas nas últimas operações. Nem sempre isso funciona, mas no geral, é a melhor solução. 

.NOTE
Faça suas variáveis mais importantes serem bastante utilizadas. 
Usando-as em repetições, por exemplo.
Isso aumentará as chances delas serem armazenadas em registradores, podendo acelerar a execução dos seus programas.


==== Unidade Lógica e Aritmética (ULA)

A Unidade Lógica e Aritmética, ou ULA, se assemelha muito com uma calculadora convencional. 
Ela executa operações lógicas e aritméticas. 
As ULAs modernas executam operações tanto com inteiros, como com números reais.
A ULA recebe como entrada dois diferentes dados que são trazidos para ela dos registradores (de propósito geral, ou específicos).
Quem decide que registradores passarão seus dados para a ULA é a Unidade de Controle baseada instrução que está sendo executada.
A Unidade de Controle também envia para a ULA qual operação será realizada (soma, multiplicação, divisão, AND, OR etc.).
Assim que isso é feito, a ULA executa a operação e gera um resultado na sua saída.
Esse resultado também é passado para um registrador escolhido pela Unidade de Controle, baseando-se na instrução em execução.

==== Unidade de Controle (UC)

A Unidade de Controle, ao receber a instrução que está armazenada em IR, a decodifica e envia os sinais de controle para onde for necessário.
Decodificar nada mais é do que ler um código em binário e interpretar a operação relativa a esse código.
Dependendo da operação, os sinais de controle podem ser internos, por exemplo, para a ULA executar uma soma, ou para o conteúdo de um registrador ser transferido para a ULA.
Ou pode ser externo, para um dispositivo de entrada e saída, por exemplo, ou mesmo para a Memória Principal. 
Tudo isso depende da instrução a ser executada.
Na próxima seção será apresentado um exemplo mais detalhado que mostrará a CPU e seus componentes em ação.

=== Funcionamento de uma CPU

Aqui eu vou apresentar um exemplo mais detalhado da execução de instrução simples, por exemplo, uma M[1] = M[2] + M[3]

Representar com um desenho para explicar melhor.


=== Atividades


. Texto da atividade.

. Texto da atividade.

. Texto da atividade.


CAUTION: *Sempre termine os arquivos com uma linha em branco*, caso 
contrário você poderá encontrar erros inesperados.

// Sempre terminar o arquivo com uma nova linha.

